// Code generated by mockery v2.13.1. DO NOT EDIT.

package internalMock

import (
	context "context"

	models "github.com/Sur0vy/cows_health.git/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// UserStorage is an autogenerated mock type for the UserStorage type
type UserStorage struct {
	mock.Mock
}

// Add provides a mock function with given fields: с, user
func (_m *UserStorage) Add(с context.Context, user models.User) error {
	ret := _m.Called(с, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) error); ok {
		r0 = rf(с, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: с, userHash
func (_m *UserStorage) Get(с context.Context, userHash string) *models.User {
	ret := _m.Called(с, userHash)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(с, userHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	return r0
}

// GetHash provides a mock function with given fields: с, user
func (_m *UserStorage) GetHash(с context.Context, user models.User) (string, error) {
	ret := _m.Called(с, user)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, models.User) string); ok {
		r0 = rf(с, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(с, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserStorage creates a new instance of UserStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserStorage(t mockConstructorTestingTNewUserStorage) *UserStorage {
	mock := &UserStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
