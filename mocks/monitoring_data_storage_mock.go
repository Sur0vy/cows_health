// Code generated by mockery v2.13.1. DO NOT EDIT.

package internalMock

import (
	context "context"

	models "github.com/Sur0vy/cows_health.git/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MonitoringDataStorage is an autogenerated mock type for the MonitoringDataStorage type
type MonitoringDataStorage struct {
	mock.Mock
}

// Add provides a mock function with given fields: c, data
func (_m *MonitoringDataStorage) Add(c context.Context, data models.MonitoringData) error {
	ret := _m.Called(c, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.MonitoringData) error); ok {
		r0 = rf(c, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: c, cowID, interval
func (_m *MonitoringDataStorage) Get(c context.Context, cowID int, interval int) ([]models.MonitoringData, error) {
	ret := _m.Called(c, cowID, interval)

	var r0 []models.MonitoringData
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []models.MonitoringData); ok {
		r0 = rf(c, cowID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.MonitoringData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(c, cowID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMonitoringDataStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewMonitoringDataStorage creates a new instance of MonitoringDataStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMonitoringDataStorage(t mockConstructorTestingTNewMonitoringDataStorage) *MonitoringDataStorage {
	mock := &MonitoringDataStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
