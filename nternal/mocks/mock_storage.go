// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Sur0vy/cows_health.git/internal/storage (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/Sur0vy/cows_health.git/internal/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddFarm mocks base method.
func (m *MockStorage) AddFarm(arg0 context.Context, arg1 storage.Farm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFarm", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFarm indicates an expected call of AddFarm.
func (mr *MockStorageMockRecorder) AddFarm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFarm", reflect.TypeOf((*MockStorage)(nil).AddFarm), arg0, arg1)
}

// AddUser mocks base method.
func (m *MockStorage) AddUser(arg0 context.Context, arg1 storage.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockStorageMockRecorder) AddUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockStorage)(nil).AddUser), arg0, arg1)
}

// DelFarm mocks base method.
func (m *MockStorage) DelFarm(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelFarm", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelFarm indicates an expected call of DelFarm.
func (mr *MockStorageMockRecorder) DelFarm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelFarm", reflect.TypeOf((*MockStorage)(nil).DelFarm), arg0, arg1)
}

// GetFarms mocks base method.
func (m *MockStorage) GetFarms(arg0 context.Context, arg1 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFarms", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFarms indicates an expected call of GetFarms.
func (mr *MockStorageMockRecorder) GetFarms(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFarms", reflect.TypeOf((*MockStorage)(nil).GetFarms), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStorage) GetUser(arg0 context.Context, arg1 string) *storage.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*storage.User)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStorageMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStorage)(nil).GetUser), arg0, arg1)
}

// GetUserHash mocks base method.
func (m *MockStorage) GetUserHash(arg0 context.Context, arg1 storage.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHash", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserHash indicates an expected call of GetUserHash.
func (mr *MockStorageMockRecorder) GetUserHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHash", reflect.TypeOf((*MockStorage)(nil).GetUserHash), arg0, arg1)
}
