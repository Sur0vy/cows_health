// Code generated by mockery v2.13.1. DO NOT EDIT.

package storageMock

import (
	context "context"

	models "github.com/Sur0vy/cows_health.git/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// CowStorage is an autogenerated mock type for the CowStorage type
type CowStorage struct {
	mock.Mock
}

// Add provides a mock function with given fields: c, cow
func (_m *CowStorage) Add(c context.Context, cow models.Cow) error {
	ret := _m.Called(c, cow)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Cow) error); ok {
		r0 = rf(c, cow)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: c, CowIDs
func (_m *CowStorage) Delete(c context.Context, CowIDs []int) error {
	ret := _m.Called(c, CowIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []int) error); ok {
		r0 = rf(c, CowIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: c, farmID
func (_m *CowStorage) Get(c context.Context, farmID int) ([]models.Cow, error) {
	ret := _m.Called(c, farmID)

	var r0 []models.Cow
	if rf, ok := ret.Get(0).(func(context.Context, int) []models.Cow); ok {
		r0 = rf(c, farmID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Cow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(c, farmID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBreeds provides a mock function with given fields: c
func (_m *CowStorage) GetBreeds(c context.Context) ([]models.Breed, error) {
	ret := _m.Called(c)

	var r0 []models.Breed
	if rf, ok := ret.Get(0).(func(context.Context) []models.Breed); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Breed)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInfo provides a mock function with given fields: c, farmID
func (_m *CowStorage) GetInfo(c context.Context, farmID int) (models.CowInfo, error) {
	ret := _m.Called(c, farmID)

	var r0 models.CowInfo
	if rf, ok := ret.Get(0).(func(context.Context, int) models.CowInfo); ok {
		r0 = rf(c, farmID)
	} else {
		r0 = ret.Get(0).(models.CowInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(c, farmID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasBolus provides a mock function with given fields: c, BolusNum
func (_m *CowStorage) HasBolus(c context.Context, BolusNum int) int {
	ret := _m.Called(c, BolusNum)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(c, BolusNum)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// UpdateHealth provides a mock function with given fields: c, data
func (_m *CowStorage) UpdateHealth(c context.Context, data models.Health) error {
	ret := _m.Called(c, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Health) error); ok {
		r0 = rf(c, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCowStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewCowStorage creates a new instance of CowStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCowStorage(t mockConstructorTestingTNewCowStorage) *CowStorage {
	mock := &CowStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
